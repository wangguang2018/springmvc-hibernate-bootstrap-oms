<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- 自动扫描且只扫描@Controller -->
	<context:component-scan base-package="com.wangguang">
	</context:component-scan>

	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/"></property>
		<property name="suffix" value=".jsp"></property>
	</bean>

	<!--<mvc:annotation-driven/>-->

	<mvc:annotation-driven content-negotiation-manager="contentNegotiationManager">
		<mvc:message-converters register-defaults="true">
			<!-- 将StringHttpMessageConverter的默认编码设为UTF-8 -->
			<bean class="org.springframework.http.converter.StringHttpMessageConverter">
				<constructor-arg value="UTF-8" />
				<property name="supportedMediaTypes">
					<list>
						<value>text/plain;charset=UTF-8</value>
					</list>
				</property>
			</bean>
			<!-- 将Jackson2HttpMessageConverter的默认格式化输出设为true -->
			<bean
					class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
				<property name="supportedMediaTypes">
					<list>
						<value>text/html;charset=UTF-8</value>
						<value>application/json;charset=UTF-8</value>
					</list>
				</property>
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>


	<!-- REST中根据URL后缀自动判定Content-Type及相应的View -->
	<bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
		<property name="mediaTypes" >
			<value>
				json=application/json
				xml=application/xml
			</value>
		</property>
	</bean>

	<mvc:default-servlet-handler/>


	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="UTF-8"></property>
		<property name="maxUploadSize" value="5242880" ></property>
	</bean>
	
	<mvc:interceptors>
		<bean class="com.wangguang.interceptor.ControllerInterceptor"></bean>
	</mvc:interceptors>

	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/*"/>
			<mvc:mapping path="/*/*" />
			<mvc:mapping path="/*/*/*" />
			<mvc:mapping path="/*/*/*/*" />
			<mvc:mapping path="/*/*/*/*/*" />
			<mvc:exclude-mapping path="/login" />
			<mvc:exclude-mapping path="/logout" />
			<mvc:exclude-mapping path="/static/*" />
			<mvc:exclude-mapping path="/static/*/*" />
			<mvc:exclude-mapping path="/static/*/*/*" />
			<mvc:exclude-mapping path="/static/*/*/*/*" />
			<bean class="com.wangguang.interceptor.MenuInterceptor" />
		</mvc:interceptor>
	</mvc:interceptors>


	<!--<bean class="com.wangguang.exception.MyExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<prop key="NullPointerException">error/NullPointerExceptions</prop>
				<prop key="IOException">error/IOExceptions</prop>
			</props>
		</property>
		<property name="statusCodes">
			<props>
				<prop key="error/NullPointerExceptions">400</prop>
				<prop key="error/IOExceptions">500</prop>
			</props>
		</property>
		<property name="defaultErrorView" value="error/Exceptions"/>
		<property name="defaultStatusCode" value="404"/>
	</bean>-->

	<!-- 将Controller抛出的异常转到特定View, 保持SiteMesh的装饰效果 -->
	<!--<bean class="com.dm.web.common.exception.ExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<prop key="org.apache.shiro.authz.UnauthorizedException">error/403</prop>
				<prop key="java.lang.Throwable">error/500</prop>
			</props>
		</property>
		<property name="defaultStatusCode" value="500" />
	</bean>-->


	<!-- 支持 Shiro对Controller的方法级AOP安全控制  begin-->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">
		<property name="proxyTargetClass" value="true" />
	</bean>

	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager"/>
	</bean>
	



	

</beans>
